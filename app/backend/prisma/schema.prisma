// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User authentication model
model User {
  id         String    @id @default(cuid())
  email      String    @unique
  password   String
  firstName  String?
  lastName   String?
  isActive   Boolean   @default(true)
  isVerified Boolean   @default(false)
  lastLogin  DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  // Relations
  sessions   Session[]
  profile    UserProfile?
  userRoles  UserRole[]

  @@map("users")
}

// User profile for additional information
model UserProfile {
  id          String  @id @default(cuid())
  userId      String  @unique
  phone       String?
  avatar      String?
  timezone    String  @default("UTC")
  language    String  @default("en")
  preferences Json?   // JSON field for user preferences
  
  // Relations
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_profiles")
}

// Session management for refresh tokens
model Session {
  id           String   @id @default(cuid())
  userId       String
  refreshToken String   @unique
  isRevoked    Boolean  @default(false)
  expiresAt    DateTime
  userAgent    String?
  ipAddress    String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([refreshToken])
  @@map("sessions")
}

// Audit log for security tracking
model AuditLog {
  id        String   @id @default(cuid())
  userId    String?
  action    String   // LOGIN, LOGOUT, PASSWORD_CHANGE, etc.
  resource  String?  // Resource being accessed
  details   Json?    // Additional details as JSON
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([action])
  @@index([createdAt])
  @@map("audit_logs")
}

// Role model for RBAC
model Role {
  id          String   @id @default(cuid())
  name        String   @unique // ADMIN, INVESTOR, USER, etc.
  description String?
  isActive    Boolean  @default(true)
  isDefault   Boolean  @default(false) // Default role for new users
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userRoles       UserRole[]
  rolePermissions RolePermission[]
  roleAssignments RoleAssignment[]

  @@map("roles")
}

// Permission model for granular access control
model Permission {
  id          String   @id @default(cuid())
  name        String   @unique // CREATE_USER, MANAGE_ROLES, VIEW_DASHBOARD, etc.
  description String?
  resource    String?  // Resource this permission applies to
  action      String?  // Action this permission allows
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  rolePermissions RolePermission[]

  @@map("permissions")
}

// Many-to-many relationship between Users and Roles
model UserRole {
  id        String   @id @default(cuid())
  userId    String
  roleId    String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
  @@index([userId])
  @@index([roleId])
  @@map("user_roles")
}

// Many-to-many relationship between Roles and Permissions
model RolePermission {
  id           String   @id @default(cuid())
  roleId       String
  permissionId String
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
  @@index([roleId])
  @@index([permissionId])
  @@map("role_permissions")
}

// Role assignment history with expiration support
model RoleAssignment {
  id          String    @id @default(cuid())
  userId      String
  roleId      String
  assignedBy  String?   // User ID who assigned the role
  reason      String?   // Reason for assignment
  expiresAt   DateTime? // Optional expiration date
  revokedAt   DateTime? // When the role was revoked
  revokedBy   String?   // User ID who revoked the role
  revokeReason String?  // Reason for revocation
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([roleId])
  @@index([assignedBy])
  @@index([expiresAt])
  @@index([isActive])
  @@map("role_assignments")
}